//
//  Mocks.generated.swift
//  Interfaces
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import Interfaces
@testable import Mockingbird
import Combine
import CombineSchedulers
import Foundation
import Swift

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked TravelAdvisoryApiImplementing
public final class TravelAdvisoryApiImplementingMock: Interfaces.TravelAdvisoryApiImplementing, Mockingbird.Mock {
  typealias MockingbirdSupertype = Interfaces.TravelAdvisoryApiImplementing
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "Interfaces"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    TravelAdvisoryApiImplementingMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getCountryDetails`(`regionCode`: String)
  public func `getCountryDetails`(`regionCode`: String) -> AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getCountryDetails`(`regionCode`: String) -> AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError>", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`regionCode`)], returnType: Swift.ObjectIdentifier((AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (String) -> AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError> { return mkbImpl(`regionCode`) }
      if let mkbImpl = mkbImpl as? () -> AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError> = mkbObject.`getCountryDetails`(regionCode: `regionCode`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getCountryDetails`(`regionCode`: @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError>, AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError>, AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getCountryDetails`(`regionCode`: String) -> AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError>", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`regionCode`)], returnType: Swift.ObjectIdentifier((AnyPublisher<Interfaces.CountryDetailsDTO, Interfaces.TravelAdvisoryApiError>).self)))
  }

  // MARK: Mocked `getCountryList`()
  public func `getCountryList`() -> AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getCountryList`() -> AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError> = mkbObject.`getCountryList`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getCountryList`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError>, AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError>, AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getCountryList`() -> AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Interfaces.CountryListDTO, Interfaces.TravelAdvisoryApiError>).self)))
  }

  // MARK: Mocked `getServerStatus`()
  public func `getServerStatus`() -> AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getServerStatus`() -> AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError> = mkbObject.`getServerStatus`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getServerStatus`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError>, AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError>, AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getServerStatus`() -> AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Interfaces.ServerStatusDTO, Interfaces.TravelAdvisoryApiError>).self)))
  }

  // MARK: Mocked `getForbiddenApi`()
  public func `getForbiddenApi`() -> AnyPublisher<Void, Interfaces.TravelAdvisoryApiError> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getForbiddenApi`() -> AnyPublisher<Void, Interfaces.TravelAdvisoryApiError>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Void, Interfaces.TravelAdvisoryApiError>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> AnyPublisher<Void, Interfaces.TravelAdvisoryApiError> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: AnyPublisher<Void, Interfaces.TravelAdvisoryApiError> = mkbObject.`getForbiddenApi`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnyPublisher<Void, Interfaces.TravelAdvisoryApiError>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getForbiddenApi`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Void, Interfaces.TravelAdvisoryApiError>, AnyPublisher<Void, Interfaces.TravelAdvisoryApiError>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Void, Interfaces.TravelAdvisoryApiError>, AnyPublisher<Void, Interfaces.TravelAdvisoryApiError>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getForbiddenApi`() -> AnyPublisher<Void, Interfaces.TravelAdvisoryApiError>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Void, Interfaces.TravelAdvisoryApiError>).self)))
  }
}

/// Returns a concrete mock of `TravelAdvisoryApiImplementing`.
public func mock(_ type: Interfaces.TravelAdvisoryApiImplementing.Protocol, file: StaticString = #file, line: UInt = #line) -> TravelAdvisoryApiImplementingMock {
  return TravelAdvisoryApiImplementingMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
